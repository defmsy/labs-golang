// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/fruit.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/fruit.go -destination=internal/core/port/mock/fruit.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFruitRepository is a mock of FruitRepository interface.
type MockFruitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFruitRepositoryMockRecorder
	isgomock struct{}
}

// MockFruitRepositoryMockRecorder is the mock recorder for MockFruitRepository.
type MockFruitRepositoryMockRecorder struct {
	mock *MockFruitRepository
}

// NewMockFruitRepository creates a new mock instance.
func NewMockFruitRepository(ctrl *gomock.Controller) *MockFruitRepository {
	mock := &MockFruitRepository{ctrl: ctrl}
	mock.recorder = &MockFruitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFruitRepository) EXPECT() *MockFruitRepositoryMockRecorder {
	return m.recorder
}

// ListFruits mocks base method.
func (m *MockFruitRepository) ListFruits() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFruits")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFruits indicates an expected call of ListFruits.
func (mr *MockFruitRepositoryMockRecorder) ListFruits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFruits", reflect.TypeOf((*MockFruitRepository)(nil).ListFruits))
}
